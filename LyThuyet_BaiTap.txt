------------------------BUỔI 1: BIẾN-----------------------------
/* 
	* Phần 1- KHÁI NIỆM VỀ BIẾN
	* 1. Biến: dùng để lưu trữ giá trị
	* 2. Biến sẽ dc lưu trên RAM có khi CT chạy, mất CT dừng
	* 3. Biến cần có kiểu dữ liệu
	* 
	* Phần 2- KIỂU DỮ LIỆU
	* - Logic: boolean trả về giá trị True/False, trong C là 1/0
	* - Ký tự: char (lưu 1 ký tự)
	* - Số nguyên: short, int, long
	* - Số thực: float, double
	* - Chuỗi: String (trong C ko có)
	* 
	* Phần 3- KHAI BÁO BIẾN
	* - C1: <kiểu dữ liệu> <tên biến>;
	* - C2: <kiểu dữ liệu> <tên biến> = <giá trị>;
	* 
	* Phần 4- QUY TẮC ĐẶT TÊN BIẾN
	* Lưu ý: ko dc bắt đầu bởi số, ko phải là keyword: 
	* int, main, return, double,...
	* * cách đặt tên
	* - normal case: hoten
	* - camel case: hoTen # HoTen => Pascal 
	* - under score: ho_ten
	*/

/* CÁCH IN RA MÀN HÌNH
	* - printf("chuỗi");//in 1 chuỗi ra màn hình
	* - printf("%d",<tên biến>);
	* //in giá trị của biến ra màn hình
	* - %d: số nguyên	-%c: ký tự
	* - %f: số thực float		-%lf: double
	* - %s: chuỗi String
	*/

/* BTVN Buổi 1: Khai báo biến 
- In ra màn hình: “Xin chao Nhan Vien FPT”. 
- Khai báo biến maSo có kiểu int, đồng thời gán giá trị cho biến maSo là 123. 
- Khai báo biến tuoi có kiểu int, đồng thời gán giá trị cho biến tuoi là 250. 
- Khai báo biến gioiTinh có kiểu bool, đồng thời gán giá trị cho biến gioiTinh là 0 hoặc 1.
- Khai báo biến luong có kiểu double. Sau đó gán giá trị cho biến luong là 13.840.000. 
- Khai báo biến bac có kiểu ký tự, đồng thời gán giá trị cho biến bac là A hoặc B hoặc C.
- In toàn bộ các biến đã khai báo ra màn hình.
*/
------------------------BUỔI 2: NHẬP XUẤT-----------------------------
/* HẰNG SỐ
	- Hằng số (constant) hướng đến những giá trị cố định mà chương trình không thể thay đổi trong quá trình thực thi.
	- Hằng số có thể là một kiểu dữ liệu bất kỳ nào như kiểu dữ liệu: số nguyên, số thực, ký tự hay chuỗi.
	- Ví dụ:
		+ Số PI = 3.141592
		+ Số C = 3*10^8
		+ e = 2.71828	
	- Cách định nghĩa hằng số
		+ C1: #define ten_hang gia_tri 
		+ C2: const kieu_du_lieu ten_hang = gia_tri;
	- Trong đó:
		+ #define là một chỉ thị tiền xử lý (preprocessor directive), không phải là một câu lệnh trong ngôn ngữ C. Vì là chỉ thị tiền xử lý, #define không kiểm tra kiểu dữ liệu và cũng không chiếm dung lượng bộ nhớ khi chương trình chạy. -> Xử lý trước khi biên dịch-> debug Khó khăn hơn
		+ const là một từ khóa trong ngôn ngữ C, định nghĩa các biến mà giá trị không thể thay đổi sau khi khởi tạo. const có kiểm tra kiểu dữ liệu và có thể sử dụng cùng với bất kỳ kiểu dữ liệu nào như int, float, char, v.v. -> Xử lý trong quá trình biên dịch-> debug Dễ dàng hơn
	- Ví dụ:
		#define CHIEUDAI 15
		const int CHIEURONG = 12;
*/
/*
	- hàm scanf: Nhập 1 giá trị từ bàn phím, và lưu giá trị đó vào trong 1 biến -> xác định được định dạng dữ liệu
	- getchar() thường được sử dụng để xóa ký tự xuống dòng (\n) còn lại trong bộ đệm sau khi dùng scanf(). Điều này giúp tránh lỗi do ký tự \n không mong muốn còn sót lại.
*/

/* BTVN
	- Bài tập 1: In ra thông tin người dùng
Yêu cầu: Viết chương trình yêu cầu người dùng nhập vào tuổi (số nguyên), chiều cao (số thực, tính bằng mét), giới tình (bool) và ký tự viết tắt tên đầu tiên của họ. Sau đó, in ra các thông tin vừa nhập theo định dạng:
		Tuổi: <tuổi>
		Chiều cao: <chiều cao>
		Giới tính: <giới tính>
		Viết tắt tên: <ký tự>

	- Bài tập 2: Tính điểm trung bình
Yêu cầu: Viết chương trình yêu cầu người dùng nhập vào mã số sinh viên (số nguyên), điểm trung bình (số thực) và xếp loại học lực (ký tự, ví dụ: A, B, C, v.v.). Sau đó, in ra các thông tin vừa nhập theo định dạng:
		Mã số sinh viên: <mã số sinh viên>
		Điểm trung bình: <điểm trung bình>
		Xếp loại: <ký tự xếp loại>

	- Bài tập 3: Thông tin sản phẩm
Yêu cầu: Viết chương trình yêu cầu người dùng nhập vào mã sản phẩm (số nguyên), giá sản phẩm (số thực) và ký hiệu đơn vị tiền tệ (ký tự, ví dụ: S cho USD, ₫ cho VND). Sau đó, in ra các thông tin vừa nhập theo định dạng:
		Mã sản phẩm: <mã sản phẩm>
		Giá: <giá sản phẩm>
		Đơn vị tiền tệ: <ký hiệu đơn vị>
*/
------------------------BUỔI 3: TOÁN TỬ-----------------------------
/*
	Khái niệm
 - Tạo thành từ các toán tử (Operator) và các toán hạng (Operand).
 - Toán tử tác động lên các giá trị của toán hạng và cho giá trị có kiểu nhất định.
 - Toán tử: +, –, *, /, %….
 - Toán hạng: hằng (PI), biến (toanTu1, toanTu2), lời gọi hàm...
*/
/*
	* 4 loại toán tử
	* 1. Toán tử số học:  + - * / % ++ --
	*		/ : phép chia -> nếu %d lấy nguyên
	*		% : phép chia lấy dư
	*		++: tăng lên 1 đơn vị
	*		--: giảm đi 1 đơn vị
 Trong đó: 
 	* Chỉ có một toán hạng trong biểu thức.
 	* ++(tăng 1 đơn vị), -- (giảm 1 đơn vị)
 	* Đặt trước toán hạng
 	* Vídụ: ++x hay --x: thực hiện tăng/giảm trước.
 	* Đặt sau toán hạng
 	* Vídụ: ++ hay x--: thực hiện tăng/giảm sau.

	* 2. Toán tử so sánh: > < >= <= == !=
		- > < : lớn hơn/ nhỏ hơn
		- >= <=: lớn hơn hoặc bằng / nhỏ hơn hoặc bằng
		- ==: so sánh bằng
		- !=: khác 
	* 3. Toán tử logic: && || !
	*	&&: Trả về giá trị true khi tất cả biểu thức tham gia biểu thức có giá trị true -> yêu cầu tất cả phải đúng
	*	||: Trả về giá trị true khi có 1 biểu thức tham gia biểu thức có giá trị là true -> 1 trong số đó đúng
	*	! : phủ đinh giá trị: true => false, ngc lại
	* 4. toán tử gán: =  += -= *= /= %=
*/

/*
	* Toán tử ba ngôi
	* <biểu thức điều kiện> ? <giá trị đúng>: <giá trị sai>;
	*=> kiểu dữ liệu
*/

/* BTVN
* Bài tập 1: Toán tử số học
Đề bài: Viết chương trình nhập vào hai số nguyên từ bàn phím và tính:
	- Tổng của hai số.
	- Hiệu của hai số.
	- Tích của hai số.
	- Thương của hai số (lấy 2 số sau dấu phẩy).
	- Phần dư của phép chia.
Yêu cầu: In ra kết quả của từng phép tính.

* Bài tập 2: Toán tử so sánh
Đề bài: Viết chương trình nhập vào hai số nguyên từ bàn phím và kiểm tra xem:
	- Số thứ nhất có lớn hơn số thứ hai không.
	- Số thứ nhất có nhỏ hơn số thứ hai không.
	- Hai số có bằng nhau không.
Yêu cầu: Sử dụng các toán tử quan hệ để kiểm tra và in kết quả dạng true hoặc false.

* Bài tập 3: Toán tử logic
Đề bài: Viết chương trình nhập vào ba số nguyên từ bàn phím. Kiểm tra xem ba số đó có đồng thời lớn hơn 0 hay không.
Yêu cầu: Sử dụng toán tử logic && để kiểm tra và in ra kết quả dạng true hoặc false.

* Bài tập 4: Toán tử gán
Đề bài: Viết chương trình nhập vào một số nguyên từ bàn phím. Sau đó, sử dụng toán tử gán cộng (+=), gán trừ (-=), gán nhân (*=), và gán chia (/=) để thực hiện các phép tính sau:
	- Tăng giá trị của số đó lên 10.
	- Giảm giá trị của số đó xuống 5.
	- Nhân giá trị của số đó với 3.
	- Chia giá trị của số đó cho 2.
Yêu cầu: In ra kết quả sau mỗi phép gán.

* Bài tập 5: Toán tử tăng/giảm
Đề bài: Viết chương trình nhập vào một số nguyên từ bàn phím, sau đó thực hiện:
	- Tăng số đó lên 1 và in ra giá trị sau khi tăng.
	- Giảm số đó đi 1 và in ra giá trị sau khi giảm.
	- In giá trị của số đó trước và sau khi sử dụng toán tử tăng (++) ở vị trí trước (++a)và sau (a++).
Yêu cầu: Quan sát sự khác biệt khi sử dụng toán tử tăng trước và sau.
*/
------------------------BUỔI 4: CẤU TRÚC RẼ NHÁNH-----------------------------
/*
	* 1. CẤU TRÚC IF
	*	if (điều kiện){
	*			//thực hiện công việc
	*	}
	* 2. CẤU TRÚC IF- ELSE
	*	if (điều kiện){
	*			//thực hiện công việc 1
	*	}else{
	*			//thực hiện công việc 2
	*	}
	* 3. CẤU TRÚC IF- ELSE-IF
	*	if (điều kiện 1){
	*			//thực hiện công việc 1
	*	}else if (điều kiện 2){
	*			//thực hiện công việc 2
	*	}else if (điều kiện 3){
	*			//thực hiện công việc 3
	*	}else {
	*			//thực hiện công việc n
	*	}
	*/
	/*Bài tập 
	* Bài 1: Nhập 1 số nguyên từ bàn phím sau đó kiểm tra số đó là số nguyên dương hay nguyên âm.
	* Bài 2: Xây dung chương trình nhập vào 1 số nguyên và kiểm tra tính chẵn lẻ của số nguyên đó
	* Bài 3: Xây dựng chương trình tính học lực của sinh viên theo điểm trung bình
	  - Nhập 3 điểm toán, văn, anh-> tính Trung bình
	  - In ra màn hình 3 điểm và điểm TB
	  - Đánh giá xếp loại:
 		+ Nếu điểm>=9: xuất sắc
 		+ Nếu 9 > điểm>=8: giỏi
 		+ Nếu 8 > điểm>=7: khá
		+ Nếu 7 > điểm>=5: trung bình
 		+ Nếu 5 > điểm>=3: yếu
 		+ Ngượclại: kém
 	  - Output: hiển thị học lực của sinh viên
	*/
------------------------BUỔI 5: SWITCH CASE-----------------------------
	/*
	* switch (<input>){
	*		case <giá trị 1>:
	*			//thực hiện công việc
	*			//break; => thoát khỏi switch-case
	*		case ...
	*		default:
	*			//thực hiện cv=> nếu ko đúng các case trên
	* }
	*/
	
	/** BTVN: Làm đề luyện tap 1

	*/
------------------------BUỔI 7: VÒNG LẶP-----------------------------
/* 1. FOR
	* FOR (khởi tạo; điều kiện; bước nhảy){
	*		//thực hiện công việc
	* }
	* => lặp đi lặp lại cv nếu đk còn đúng
	* => bước nhảy: tăng/ giảm đơn vị
	*/
/* 2. WHILE
	* WHILE (ĐIỀU KIỆN){
	*			//thực hiện code
	*	}
	* => nếu đk đúng=> tiếp tục thực hiện code
	* Cách gõ: whi+ tab
	*/
/* 3. DO-WHILE
	* DO {
	*		//thực hiện code
	* }WHILE (ĐIỀU KIỆN);
	*  => thực hiện ít nhất 1 lần => cho dù đk có sai từ đầu
	*  => kiểm tra điều kiện sau
	*  => nếu đúng thì tiếp tục thực hiện công việc
	* Cách gõ: do + tab
	*/
/* Bài tập trên lớp:
	* BÀI 1: Nhập vào 1 số nguyên dương từ bàn phím. Dùng vòng lặp for in ra các số từ 1 đến số vừa nhập.
	* BÀI 2: Nhập vào 1 số nguyên dương từ bàn phím. Dùng vòng lặp for in ra các số từ số vừa nhập về số 0.
	* BÀI 3: Nhập vào 1 số nguyên dương (1-10) từ bàn phím -> kiểm tra if else. In ra bang cửu chương của số đó.
	* BÀI 4: Nhập vào 1 số nguyên dương từ bàn phím. Dùng vòng lặp while để tính tổng các số từ 1 đến số vừa nhập.
	* BÀI 5: Nhập vào 1 số nguyên dương từ bàn phím, chỉ cho phép nhập số từ 0-10. nếu sai yêu cầu nhập lại. Yêu cầu thực hiện ít nhat 1 lần.
	* BÀI 6: Tạo menu switch case có sử dung vòng lặp cho 5 bài trên.
*/
/* BTVN : Tạo menu cho bài dưới đây. Sử dung switch case có kết hợp vòng lặp
	* Bài 1: Tính tổng các số từ 1 đến n: Nhập vào một số nguyên dương n, dùng vòng lặp for để tính và in ra tổng các số từ 1 đến n.
	* Bài 2: In các số chẵn trong khoảng từ 1 đến n: Nhập vào số nguyên dương n, sử dụng vòng lặp for hoặc while để in ra các số chẵn từ 1 đến n.
	* Bài 3:Nhập tuổi từ bàn phím, tuổi yêu cầu từ 18 - 50 nếu sai yêu cầu nhập lại. Thực hiện it nhất 1 lần. Sử dung do-while
	* Bài 4: Tính tổng các chữ số của một số nguyên dương: Nhập vào một số nguyên dương n, dùng vòng lặp do-while để tính và in ra tổng các chữ số của n.

*/

------------------------BUỔI 11: HÀM-----------------------------
- Hàm là một đoạn chương trình có tên, đầu vào và đầu ra.
- Hàm được gọi nhiều lần với các tham số khác nhau.
- Hàm được sử dụng khi có nhu cầu:
	+ Tái sử dụng.
 	+ Sửa lỗi và cải tiến.
- Có 4 loại hàm cơ bản:
	1. HÀM KHÔNG TRẢ VỀ, KHÔNG THAM SỐ TRUYỀN VÀO
		void <tên hàm> (){
			//code trong hàm
		}
	2. HÀM KHÔNG TRẢ VỀ, CÓ THAM SỐ TRUYỀN VÀO
		void <tên hàm> ([danh sách tham số]){
			//code trong hàm
		}
	3. HÀM TRẢ VỀ, KHÔNG THAM SỐ TRUYỀN VÀO
		<kiểu dữ liệu hàm trả về> <tên hàm> (){
			//code trong hàm
			return <giá trị>;
		}
	4. HÀM TRẢ VỀ, CÓ THAM SỐ TRUYỀN VÀO
		<kiểu dữ liệu hàm trả về> <tên hàm> ([danh sách tham số]){
			//code trong hàm
			return <giá trị>;
		}
- Hàm định nghĩa sẵn -> Khai báo thư viện math.h
	+ pow(a, n): Tính a^n (a lũy thừa n)
 	+ sqrt(a)  : Tính căn bậc 2 của a
 	+ abs(a)   : Lấy giá trị tuyệt đối của a
 	+ ceil(a)  : Lấy số nguyên trên của a //hàm trần
 	+ floor(a) : Lấy số nguyên dưới của  //hàm sàn
  Ví dụ

 x=Math.pow(5, 3) => x=75
 x=Math.sqrt(16) => x=4
 x=Math.abs(-5) => x=5
 x=Math.ceil(3.5) => x=4
 x=Math.floor(3.5) => x=3
 
/* BÀI TẬP
	* Bài 1: Tạo hàm không trả về, không tham số truyền vào, thực hiện tính tổng các số chẵn từ a đến b với a,b là số nguyên dương nhập từ bàn phím
	* Bài 2: Tạo hàm không trả về, có tham số truyền vào, thực hiện tính giai thừa của 1 số biết: 
	n!=1×2×3×...×n,  với n≥1
	0! = 1
	* Bài 3: Tạo hàm có trả về, không tham số truyền vào, thực hiện chương trình: nhập vào số giờ (float) và bậc lương (float), sau đó tính lương của nhân viên theo công thức: lương =  số giờ * bậc lương.
	* Bài 4: Tạo hàm có trả về, có tham số truyền vào, thực hiện chương trình: nhập 1 số nguyên dương x tính tổng các số chia hết cho 3 hoặc 5 trong khoang tu 1-> x

*/

------------------------BUỔI 12: MẢNG-----------------------------
- Mảng là tập hợp các phần tử cùng kiểu dữ liệu.
- Mảng có số lượng phần tử cố định và được cấp phát vùng nhớ liên tục.
- Truy xuất các phần tử mảng bằng chỉ số, bắt đầu là 0
- Cú pháp: 
<kiểu dữ liệu> <tên biến mảng> [<số lượng phần tử mảng>]

/* BÀI TẬP
	* Bài 1: Khởi tạo 1 mảng có sẵn 6 phần tử: 3 8 1 2 9 6. Sau đó cập nhật giá trị phần tử đầu tiên = 10. in toàn bộ phần tử ra màn hình
	* Bài 2: Nhập số lượng sinh viên, sau đó nhập mảng cân nặng của các Sinh viên đó từ bàn phím và in kết quả ra màn hình
	* Bài 3: Nhập số lượng latop , sau đó nhập mảng giá tiền (float) của các laptop đó từ bàn phím và in kết quả ra màn hình
	* Bài 4: Nhập số lượng phòng học , sau đó nhập mảng diện tích (double)của các phòng đó từ bàn phím và in kết quả ra màn hình
	* Bài 5: Nhập số lượng xe máy , sau đó nhập mảng phân khối (int)của các xe máy đó từ bàn phím và in kết quả ra màn hình

*/