------------------------BUỔI 1: BIẾN-----------------------------
/* 
	* Phần 1- KHÁI NIỆM VỀ BIẾN
	* 1. Biến: dùng để lưu trữ giá trị
	* 2. Biến sẽ dc lưu trên RAM có khi CT chạy, mất CT dừng
	* 3. Biến cần có kiểu dữ liệu
	* 
	* Phần 2- KIỂU DỮ LIỆU
	* - Logic: boolean trả về giá trị True/False, trong C là 1/0
	* - Ký tự: char (lưu 1 ký tự)
	* - Số nguyên: short, int, long
	* - Số thực: float, double
	* - Chuỗi: String (trong C ko có)
	* 
	* Phần 3- KHAI BÁO BIẾN
	* - C1: <kiểu dữ liệu> <tên biến>;
	* - C2: <kiểu dữ liệu> <tên biến> = <giá trị>;
	* 
	* Phần 4- QUY TẮC ĐẶT TÊN BIẾN
	* Lưu ý: ko dc bắt đầu bởi số, ko phải là keyword: 
	* int, main, return, double,...
	* * cách đặt tên
	* - normal case: hoten
	* - camel case: hoTen # HoTen => Pascal 
	* - under score: ho_ten
	*/

/* CÁCH IN RA MÀN HÌNH
	* - printf("chuỗi");//in 1 chuỗi ra màn hình
	* - printf("%d",<tên biến>);
	* //in giá trị của biến ra màn hình
	* - %d: số nguyên	-%c: ký tự
	* - %f: số thực float		-%lf: double
	* - %s: chuỗi String
	*/

/* BTVN Buổi 1: Khai báo biến 
- In ra màn hình: “Xin chao Nhan Vien FPT”. 
- Khai báo biến maSo có kiểu int, đồng thời gán giá trị cho biến maSo là 123. 
- Khai báo biến tuoi có kiểu int, đồng thời gán giá trị cho biến tuoi là 250. 
- Khai báo biến gioiTinh có kiểu bool, đồng thời gán giá trị cho biến gioiTinh là 0 hoặc 1.
- Khai báo biến luong có kiểu double. Sau đó gán giá trị cho biến luong là 13.840.000. 
- Khai báo biến bac có kiểu ký tự, đồng thời gán giá trị cho biến bac là A hoặc B hoặc C.
- In toàn bộ các biến đã khai báo ra màn hình.
*/
------------------------BUỔI 2: NHẬP XUẤT-----------------------------
/* HẰNG SỐ
	- Hằng số (constant) hướng đến những giá trị cố định mà chương trình không thể thay đổi trong quá trình thực thi.
	- Hằng số có thể là một kiểu dữ liệu bất kỳ nào như kiểu dữ liệu: số nguyên, số thực, ký tự hay chuỗi.
	- Ví dụ:
		+ Số PI = 3.141592
		+ Số C = 3*10^8
		+ e = 2.71828	
	- Cách định nghĩa hằng số
		+ C1: #define ten_hang gia_tri 
		+ C2: const kieu_du_lieu ten_hang = gia_tri;
	- Trong đó:
		+ #define là một chỉ thị tiền xử lý (preprocessor directive), không phải là một câu lệnh trong ngôn ngữ C. Vì là chỉ thị tiền xử lý, #define không kiểm tra kiểu dữ liệu và cũng không chiếm dung lượng bộ nhớ khi chương trình chạy. -> Xử lý trước khi biên dịch-> debug Khó khăn hơn
		+ const là một từ khóa trong ngôn ngữ C, định nghĩa các biến mà giá trị không thể thay đổi sau khi khởi tạo. const có kiểm tra kiểu dữ liệu và có thể sử dụng cùng với bất kỳ kiểu dữ liệu nào như int, float, char, v.v. -> Xử lý trong quá trình biên dịch-> debug Dễ dàng hơn
	- Ví dụ:
		#define CHIEUDAI 15
		const int CHIEURONG = 12;
*/
/*
	- hàm scanf: Nhập 1 giá trị từ bàn phím, và lưu giá trị đó vào trong 1 biến -> xác định được định dạng dữ liệu
	- getchar() thường được sử dụng để xóa ký tự xuống dòng (\n) còn lại trong bộ đệm sau khi dùng scanf(). Điều này giúp tránh lỗi do ký tự \n không mong muốn còn sót lại.
*/

/* BTVN
	- Bài tập 1: In ra thông tin người dùng
Yêu cầu: Viết chương trình yêu cầu người dùng nhập vào tuổi (số nguyên), chiều cao (số thực, tính bằng mét), giới tình (bool) và ký tự viết tắt tên đầu tiên của họ. Sau đó, in ra các thông tin vừa nhập theo định dạng:
		Tuổi: <tuổi>
		Chiều cao: <chiều cao>
		Giới tính: <giới tính>
		Viết tắt tên: <ký tự>

	- Bài tập 2: Tính điểm trung bình
Yêu cầu: Viết chương trình yêu cầu người dùng nhập vào mã số sinh viên (số nguyên), điểm trung bình (số thực) và xếp loại học lực (ký tự, ví dụ: A, B, C, v.v.). Sau đó, in ra các thông tin vừa nhập theo định dạng:
		Mã số sinh viên: <mã số sinh viên>
		Điểm trung bình: <điểm trung bình>
		Xếp loại: <ký tự xếp loại>

	- Bài tập 3: Thông tin sản phẩm
Yêu cầu: Viết chương trình yêu cầu người dùng nhập vào mã sản phẩm (số nguyên), giá sản phẩm (số thực) và ký hiệu đơn vị tiền tệ (ký tự, ví dụ: S cho USD, ₫ cho VND). Sau đó, in ra các thông tin vừa nhập theo định dạng:
		Mã sản phẩm: <mã sản phẩm>
		Giá: <giá sản phẩm>
		Đơn vị tiền tệ: <ký hiệu đơn vị>
*/
------------------------BUỔI 3: TOÁN TỬ-----------------------------
/*
	Khái niệm
 - Tạo thành từ các toán tử (Operator) và các toán hạng (Operand).
 - Toán tử tác động lên các giá trị của toán hạng và cho giá trị có kiểu nhất định.
 - Toán tử: +, –, *, /, %….
 - Toán hạng: hằng (PI), biến (toanTu1, toanTu2), lời gọi hàm...
*/
/*
	* 4 loại toán tử
	* 1. Toán tử số học:  + - * / % ++ --
	*		/ : phép chia lấy nguyên
	*		% : phép chia lấy dư
	*		++: tăng lên 1 đơn vị
	*		--: giảm đi 1 đơn vị
 Trong đó: 
 	* Chỉ có một toán hạng trong biểu thức.
 	* ++(tăng 1 đơn vị), -- (giảm 1 đơn vị)
 	* Đặt trước toán hạng
 	* Vídụ: ++x hay --x: thực hiện tăng/giảm trước.
 	* Đặt sau toán hạng
 	* Vídụ: ++ hay x--: thực hiện tăng/giảm sau.

	* 2. Toán tử so sánh: > < >= <= == !=
		- > < : lớn hơn/ nhỏ hơn
		- >= <=: lớn hơn hoặc bằng / nhỏ hơn hoặc bằng
		- ==: so sánh bằng
		- !=: khác 
	* 3. Toán tử logic: && || !
	*	&&: Trả về giá trị true khi tất cả biểu thức tham gia biểu thức có giá trị true -> yêu cầu tất cả phải đúng
	*	||: Trả về giá trị true khi có 1 biểu thức tham gia biểu thức có giá trị là true -> 1 trong số đó đúng
	*	! : phủ đinh giá trị: true => false, ngc lại
	* 4. toán tử gán: =  += -= *= /= %=
*/

/*
	* Toán tử ba ngôi
	* <biểu thức điều kiện> ? <giá trị đúng>: <giá trị sai>;
	*=> kiểu dữ liệu
*/

/* BTVN
* Bài tập 1: Toán tử số học
Đề bài: Viết chương trình nhập vào hai số nguyên từ bàn phím và tính:
	- Tổng của hai số.
	- Hiệu của hai số.
	- Tích của hai số.
	- Thương của hai số (lấy 2 số sau dấu phẩy).
	- Phần dư của phép chia.
Yêu cầu: In ra kết quả của từng phép tính.

* Bài tập 2: Toán tử quan hệ
Đề bài: Viết chương trình nhập vào hai số nguyên từ bàn phím và kiểm tra xem:
	- Số thứ nhất có lớn hơn số thứ hai không.
	- Số thứ nhất có nhỏ hơn số thứ hai không.
	- Hai số có bằng nhau không.
Yêu cầu: Sử dụng các toán tử quan hệ để kiểm tra và in kết quả dạng true hoặc false.

* Bài tập 3: Toán tử logic
Đề bài: Viết chương trình nhập vào ba số nguyên từ bàn phím. Kiểm tra xem ba số đó có đồng thời lớn hơn 0 hay không.
Yêu cầu: Sử dụng toán tử logic && để kiểm tra và in ra kết quả dạng true hoặc false.

* Bài tập 4: Toán tử gán
Đề bài: Viết chương trình nhập vào một số nguyên từ bàn phím. Sau đó, sử dụng toán tử gán cộng (+=), gán trừ (-=), gán nhân (*=), và gán chia (/=) để thực hiện các phép tính sau:
	- Tăng giá trị của số đó lên 10.
	- Giảm giá trị của số đó xuống 5.
	- Nhân giá trị của số đó với 3.
	- Chia giá trị của số đó cho 2.
Yêu cầu: In ra kết quả sau mỗi phép gán.

* Bài tập 5: Toán tử tăng/giảm
Đề bài: Viết chương trình nhập vào một số nguyên từ bàn phím, sau đó thực hiện:
	- Tăng số đó lên 1 và in ra giá trị sau khi tăng.
	- Giảm số đó đi 1 và in ra giá trị sau khi giảm.
	- In giá trị của số đó trước và sau khi sử dụng toán tử tăng (++) ở vị trí trước (++a)và sau (a++).
Yêu cầu: Quan sát sự khác biệt khi sử dụng toán tử tăng trước và sau.
*/